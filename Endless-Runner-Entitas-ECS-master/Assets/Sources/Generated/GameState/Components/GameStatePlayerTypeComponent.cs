//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateContext {

    public GameStateEntity playerTypeEntity { get { return GetGroup(GameStateMatcher.PlayerType).GetSingleEntity(); } }
    public PlayerTypeComponent playerType { get { return playerTypeEntity.playerType; } }
    public bool hasPlayerType { get { return playerTypeEntity != null; } }

    public GameStateEntity SetPlayerType(int newValue) {
        if (hasPlayerType) {
            throw new Entitas.EntitasException("Could not set PlayerType!\n" + this + " already has an entity with PlayerTypeComponent!",
                "You should check if the context already has a playerTypeEntity before setting it or use context.ReplacePlayerType().");
        }
        var entity = CreateEntity();
        entity.AddPlayerType(newValue);
        return entity;
    }

    public void ReplacePlayerType(int newValue) {
        var entity = playerTypeEntity;
        if (entity == null) {
            entity = SetPlayerType(newValue);
        } else {
            entity.ReplacePlayerType(newValue);
        }
    }

    public void RemovePlayerType() {
        playerTypeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateEntity {

    public PlayerTypeComponent playerType { get { return (PlayerTypeComponent)GetComponent(GameStateComponentsLookup.PlayerType); } }
    public bool hasPlayerType { get { return HasComponent(GameStateComponentsLookup.PlayerType); } }

    public void AddPlayerType(int newValue) {
        var index = GameStateComponentsLookup.PlayerType;
        var component = CreateComponent<PlayerTypeComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlayerType(int newValue) {
        var index = GameStateComponentsLookup.PlayerType;
        var component = CreateComponent<PlayerTypeComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerType() {
        RemoveComponent(GameStateComponentsLookup.PlayerType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameStateMatcher {

    static Entitas.IMatcher<GameStateEntity> _matcherPlayerType;

    public static Entitas.IMatcher<GameStateEntity> PlayerType {
        get {
            if (_matcherPlayerType == null) {
                var matcher = (Entitas.Matcher<GameStateEntity>)Entitas.Matcher<GameStateEntity>.AllOf(GameStateComponentsLookup.PlayerType);
                matcher.componentNames = GameStateComponentsLookup.componentNames;
                _matcherPlayerType = matcher;
            }

            return _matcherPlayerType;
        }
    }
}
