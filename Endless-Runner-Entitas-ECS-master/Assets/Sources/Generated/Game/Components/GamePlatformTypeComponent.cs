//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlatformTypeComponent platformType { get { return (PlatformTypeComponent)GetComponent(GameComponentsLookup.PlatformType); } }
    public bool hasPlatformType { get { return HasComponent(GameComponentsLookup.PlatformType); } }

    public void AddPlatformType(int newValue) {
        var index = GameComponentsLookup.PlatformType;
        var component = CreateComponent<PlatformTypeComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlatformType(int newValue) {
        var index = GameComponentsLookup.PlatformType;
        var component = CreateComponent<PlatformTypeComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlatformType() {
        RemoveComponent(GameComponentsLookup.PlatformType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlatformType;

    public static Entitas.IMatcher<GameEntity> PlatformType {
        get {
            if (_matcherPlatformType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlatformType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlatformType = matcher;
            }

            return _matcherPlatformType;
        }
    }
}
