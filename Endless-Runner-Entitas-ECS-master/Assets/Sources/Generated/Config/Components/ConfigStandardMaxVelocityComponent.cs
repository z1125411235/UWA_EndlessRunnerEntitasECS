//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity standardMaxVelocityEntity { get { return GetGroup(ConfigMatcher.StandardMaxVelocity).GetSingleEntity(); } }
    public StandardMaxVelocityComponent standardMaxVelocity { get { return standardMaxVelocityEntity.standardMaxVelocity; } }
    public bool hasStandardMaxVelocity { get { return standardMaxVelocityEntity != null; } }

    public ConfigEntity SetStandardMaxVelocity(UnityEngine.Vector2 newValue) {
        if (hasStandardMaxVelocity) {
            throw new Entitas.EntitasException("Could not set StandardMaxVelocity!\n" + this + " already has an entity with StandardMaxVelocityComponent!",
                "You should check if the context already has a standardMaxVelocityEntity before setting it or use context.ReplaceStandardMaxVelocity().");
        }
        var entity = CreateEntity();
        entity.AddStandardMaxVelocity(newValue);
        return entity;
    }

    public void ReplaceStandardMaxVelocity(UnityEngine.Vector2 newValue) {
        var entity = standardMaxVelocityEntity;
        if (entity == null) {
            entity = SetStandardMaxVelocity(newValue);
        } else {
            entity.ReplaceStandardMaxVelocity(newValue);
        }
    }

    public void RemoveStandardMaxVelocity() {
        standardMaxVelocityEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public StandardMaxVelocityComponent standardMaxVelocity { get { return (StandardMaxVelocityComponent)GetComponent(ConfigComponentsLookup.StandardMaxVelocity); } }
    public bool hasStandardMaxVelocity { get { return HasComponent(ConfigComponentsLookup.StandardMaxVelocity); } }

    public void AddStandardMaxVelocity(UnityEngine.Vector2 newValue) {
        var index = ConfigComponentsLookup.StandardMaxVelocity;
        var component = CreateComponent<StandardMaxVelocityComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceStandardMaxVelocity(UnityEngine.Vector2 newValue) {
        var index = ConfigComponentsLookup.StandardMaxVelocity;
        var component = CreateComponent<StandardMaxVelocityComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveStandardMaxVelocity() {
        RemoveComponent(ConfigComponentsLookup.StandardMaxVelocity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherStandardMaxVelocity;

    public static Entitas.IMatcher<ConfigEntity> StandardMaxVelocity {
        get {
            if (_matcherStandardMaxVelocity == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.StandardMaxVelocity);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherStandardMaxVelocity = matcher;
            }

            return _matcherStandardMaxVelocity;
        }
    }
}
