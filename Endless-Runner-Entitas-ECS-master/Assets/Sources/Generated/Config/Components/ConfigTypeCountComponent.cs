//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity typeCountEntity { get { return GetGroup(ConfigMatcher.TypeCount).GetSingleEntity(); } }
    public TypeCountComponent typeCount { get { return typeCountEntity.typeCount; } }
    public bool hasTypeCount { get { return typeCountEntity != null; } }

    public ConfigEntity SetTypeCount(int newValue) {
        if (hasTypeCount) {
            throw new Entitas.EntitasException("Could not set TypeCount!\n" + this + " already has an entity with TypeCountComponent!",
                "You should check if the context already has a typeCountEntity before setting it or use context.ReplaceTypeCount().");
        }
        var entity = CreateEntity();
        entity.AddTypeCount(newValue);
        return entity;
    }

    public void ReplaceTypeCount(int newValue) {
        var entity = typeCountEntity;
        if (entity == null) {
            entity = SetTypeCount(newValue);
        } else {
            entity.ReplaceTypeCount(newValue);
        }
    }

    public void RemoveTypeCount() {
        typeCountEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public TypeCountComponent typeCount { get { return (TypeCountComponent)GetComponent(ConfigComponentsLookup.TypeCount); } }
    public bool hasTypeCount { get { return HasComponent(ConfigComponentsLookup.TypeCount); } }

    public void AddTypeCount(int newValue) {
        var index = ConfigComponentsLookup.TypeCount;
        var component = CreateComponent<TypeCountComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTypeCount(int newValue) {
        var index = ConfigComponentsLookup.TypeCount;
        var component = CreateComponent<TypeCountComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTypeCount() {
        RemoveComponent(ConfigComponentsLookup.TypeCount);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherTypeCount;

    public static Entitas.IMatcher<ConfigEntity> TypeCount {
        get {
            if (_matcherTypeCount == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.TypeCount);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherTypeCount = matcher;
            }

            return _matcherTypeCount;
        }
    }
}
